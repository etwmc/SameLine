%{
    #include "parser.hpp"
    #include <stdio.h>
    
    int yylex();
    int yyerror(const char*);
    bool endOfParse = false;
    %}
//The T_ means token
%token T_Section T_UnSection
%token T_Case T_EndCase
%token T_TestCode T_TestSetup
%token T_NewLine T_EOF
%token T_String

%%
T_Components: T_Components T_Component {
    if (endOfParse) YYACCEPT;
} | T_Component

T_Component: T_SectionConf|T_SectionPop|T_CaseLine|T_TestLine|T_Code|T_Setup|T_Break { }

T_SectionConf: T_Section T_Break  {
    TestSection *conf = currentSection->subSection[buffer];
    if (conf == NULL) { conf = new TestSection(); currentSection->subSection[buffer] = conf; }
    conf->name = buffer;
    conf->parentSection = currentSection;
    currentSection = conf;
    printf("Test: %s\n", buffer.c_str());
    buffer = "";
}

T_Setup: T_TestSetup T_Break {
    if (currentCase == NULL) {
        currentSection->setup.push_back(buffer);
    } else {
        currentCase->setup.push_back(buffer);
    }
    buffer = "";
}

T_SectionPop: T_UnSection T_Break  {
    currentSection = currentSection->parentSection;
    currentCase = NULL;
    if (currentSection == NULL) {
        printf("Pop too much\n");
    }
    buffer = "";
}

T_CaseLine: T_Case T_Break {
    printf("Case Name: %s\n", buffer.c_str());
    string caseName = buffer;
    if (caseName.length() > 0) {
        //There is a name
        TestCase *tCase = currentSection->cases[caseName];
        if (tCase == NULL) {
            tCase = new TestCase();
            tCase->name = caseName;
            currentSection->cases[caseName] = tCase;
        }
        currentCase = tCase;
    }
    else {
        currentCase = NULL;
        printf("There is no name in the case on line %d", yylineno);
        exit(0);
    }
    buffer = "";
}

T_CaseLine: T_EndCase T_Break {
    currentCase = NULL;
    buffer = "";
}

T_TestLine: T_TestCode T_Break {
    TestCode *code = new TestCode();
    code->lineNum = yylineno-1;
    code->content = buffer;
    currentCase->codes.push_back(code);
    buffer = "";
}

T_Code: T_String {
    //This is code section
    printf("Code: \n%s", buffer.c_str());
    code += buffer;
    buffer = "";
}

T_Break: T_NewLine | EOF
EOF: T_EOF {
    endOfParse = true;
}

%%
/*int main () {
    return yyparse();
}*/
int yyerror (const char *s) {
    printf("Buffer: %s\n", buffer.c_str());
    printf("Error: %s\n", s);
    return 0;
}
